import telebot, requests, os, re
from telebot import types

bot = telebot.TeleBot('6149957194:AAHvsUnLJPLMWzxHPUQik6dhqxRSZziuV0w')
requests.get('https://t.me/@TestMapInChatBot')

# #–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ InLine –∫–Ω–æ–ø–æ–∫
# @bot.message_handler(content_types=["text"])
# def any_msg(message):
#     markup = types.InlineKeyboardMarkup()
#     btn1 = types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="test")
#     markup.add(btn1)
#     bot.send_message(message.chat.id, "–Ø ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", reply_markup=markup)
# @bot.callback_query_handler(func=lambda call: True)
# def callback_inline(call):
#     # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
#     if call.message:
#         if call.data == "test":
#             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü—ã—â—å")
#     # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
#     # elif call.inline_message_id:
#     #     if call.data == "test":
#     #         bot.edit_message_text(inline_message_id=call.inline_message_id, text="–ë–¥—ã—â—å")

# #–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
# @bot.message_handler(commands=["start","help"])
# def welcome(message):
#     hello = bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é –≤–∞—Å –º–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç!")
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     mrk = types.KeyboardButton("–ö–∞—Ç–∞–ª–æ–≥", callback_data='katalog')
#     mrk1 = types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')
#     markup.add(mrk,mrk1)
#     bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é,—á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", reply_markup=markup)
# @bot.callback_query_handler(func=lambda call: True)
# def answer(call):
#     if call.data == 'katalog':
#     markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     mar = types.KeyboardButton("–û–¥–µ–∂–¥–∞", callback_data=odezda)
#     mar2 = types.KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=back)
#     markup1.add(mar,mar2)
#     bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ,—á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ,–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' ",reply_markup=markup1)
#     elif call.data == 'cart':
#         # –ß—Ç–æ —Ç–æ
#     elif call.data == 'back':
#         bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é",reply_markup=None)

@bot.message_handler(commands=['help'])
def pre_start(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data="test1")
    btn2 = types.InlineKeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data="test2")
    markup.row(btn1, btn2)
    bot.reply_to(message, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–∫—Ä–∞—Ç–∫–æ)', reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
    btn2 = types.KeyboardButton('–ù–µ, –ø–æ–ø–æ–∑–∂–µ')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, f'ü§öüèª–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name} {message.from_user.last_name}</b>, —Å—Ç–∞—Ä—Ç—É–µ–º?)', parse_mode='html', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–¢–µ—Å—Ç –ü—Ä–∏–º–æ—Ä—å—è')
        btn2 = types.KeyboardButton('–¢–µ—Å—Ç –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞')
        btn3 = types.KeyboardButton('–¢–µ—Å—Ç –ö—É—Ä—Å–∫–∞')
        btn4 = types.KeyboardButton('–¢–µ—Å—Ç –†–æ—Å—Ç–æ–≤–∞')
        btn5 = types.KeyboardButton('Coming soon')
        # btn3 = types.KeyboardButton('Coming soon')
        markup.add(btn1, btn2, btn3, btn4, btn5)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –†–µ–≥–∏–æ–Ω', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞

    elif message.text == '–ù–µ, –ø–æ–ø–æ–∑–∂–µ':
        bot.send_message(message.chat.id, '–¢–æ–≥–¥–∞ –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π) –∏–ª–∏ –º–æ–∂–µ—Ç...', parse_mode='Markdown')

    elif message.text == '–¢–µ—Å—Ç –ü—Ä–∏–º–æ—Ä—å—è':
        bot.send_message(message.chat.id, '‚ö™Ô∏è–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ - –ü—Ä–∏–º–æ—Ä—å—è üîΩ')
        os.system('pytest -s test_PK.py > Results/PK_log.txt')  # –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ test_PK.py –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª logs.txt
        # os.system('py test_PK.py > Results/PK_logs.txt')
        with open('Results/PK_log.txt', 'r', -1, 'utf-8') as fi:
            #     # f = fi.read()[262:1031] # –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            f = fi.read()[185:936]  # –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            opt_1 = re.sub(r'\s[.]', '\n', f)
            # opt_2 =  re.sub(r'\D[=]', ' ', opt_1) #—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ—á–∫–∏
        bot.send_message(message.chat.id, opt_1)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        bot.send_message(message.chat.id, 'üü¢–ó–∞–∫–æ–Ω—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ - –ü—Ä–∏–º–æ—Ä—å—è')

    elif message.text == '–¢–µ—Å—Ç –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞':
        bot.send_message(message.chat.id, '‚ö™Ô∏è–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ - –ù–°–û üîΩ')
        os.system('pytest -s test_NSO.py > Results/NSO.log')  # –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ test_NSO.py –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª logs.txt
        # os.system('py test_NSO.py > Results/NSO_logs.txt')
        with open('Results/NSO.log', 'r', -1, 'utf-8') as fi:
            #     # f = fi.read()[262:1031] # –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            f = fi.read()[185:936]  # –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            opt_1 = re.sub(r'\s[.]', '\n', f)
            # opt_2 =  re.sub(r'\D[=]', ' ', opt_1) #—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ—á–∫–∏
        bot.send_message(message.chat.id, opt_1)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        bot.send_message(message.chat.id, 'üü¢–ó–∞–∫–æ–Ω—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ - –ù–°–û')

    elif message.text == '–¢–µ—Å—Ç –ö—É—Ä—Å–∫–∞':
        bot.send_message(message.chat.id, '‚ö™Ô∏è–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ - –ö—É—Ä—Å–∫–∞ üîΩ')
        os.system('pytest -s test_KURO.py > Results/KURO_log.txt')  # –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ test_KURO.py –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª logs.txt
        # os.system('py test_KURO.py > Results/KURO_logs.txt')
        with open('Results/KURO_log.txt', 'r', -1, 'utf-8') as fi:
            #     # f = fi.read()[262:1031] # –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            f = fi.read()[185:936]  # –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            opt_1 = re.sub(r'\s[.]', '\n', f)
            # opt_2 =  re.sub(r'\D[=]', ' ', opt_1) #—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ—á–∫–∏
        bot.send_message(message.chat.id, opt_1)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        bot.send_message(message.chat.id, 'üü¢–ó–∞–∫–æ–Ω—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ - –ö—É—Ä—Å–∫–∞')

    elif message.text == '–¢–µ—Å—Ç –†–æ—Å—Ç–æ–≤–∞':
        bot.send_message(message.chat.id, '‚ö™Ô∏è–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ - –†–æ—Å—Ç–æ–≤–∞ üîΩ')
        os.system('pytest -s test_RO.py > Results/RO_log.txt')  # –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ test_RO.py –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª logs.txt
        # os.system('py test_RO.py > Results/RO_logs.txt')
        with open('Results/RO_log.txt', 'r', -1, 'utf-8') as fi:
            #     # f = fi.read()[262:1031] # –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            f = fi.read()[185:936]  # –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            opt_1 = re.sub(r'\s[.]', '\n', f)
            # opt_2 =  re.sub(r'\D[=]', ' ', opt_1) #—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ—á–∫–∏
        bot.send_message(message.chat.id, opt_1)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        bot.send_message(message.chat.id, 'üü¢–ó–∞–∫–æ–Ω—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ - –†–æ—Å—Ç–æ–≤–∞')

    elif message.text == 'Coming soon':
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤', parse_mode='Markdown')

    # elif message.text == '–ë—É–¥—É—â–∏–µ —Å—Ç–µ–Ω–¥—ã':
    #     bot.send_message(message.from_user.id, '–ë—É–¥—É—â–∏–µ —Å—Ç–µ–Ω–¥—ã', parse_mode='Markdown')

# bot.polling(none_stop=True, interval=0)
# bot.infinity_polling(none_stop=True)
bot.polling(none_stop=True, timeout=123)